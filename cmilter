#!/usr/bin/env perl

#  Copyright (C) 2012-2022 Nigel Horne <njh@bandsman.co.uk>
#
# Usage is subject to licence terms.
# The licence terms of this software are as follows:
# Personal single user, single computer use: GPL2
# All other users (including Commercial, Charity, Educational, Government)
#	must apply in writing for a licence for use from Nigel Horne at the
#	above e-mail.

# The personal, single user, single computer, use licence is:
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
# This program is a milter (i.e. a sendmail filter/plug-in) which blocks
# connections from remote sites in countries that we know we won't get e-mails
# from.
#
# The latest development version is available
#	from https://github.com/nigelhorne/cmilter

# Before installing:
#	modify the blacklist hash table
#	apt-get install libgeoip-dev
#	choose your caching algorithm (look for $cache = in this code)
#	Install CPAN Geo::IP
#
# To install, simply put this script into /usr/local/etc/clmilter

# To run add this to /etc/rc.local:
#	rm -f /var/run/cmilter
#	/usr/local/etc/cmilter local:/var/run/cmilter
#
# And put this into /etc/mail/sendmail.mc
# INPUT_MAIL_FILTER(`cmilter', `S=local:/var/run/cmilter, F=T, T=S:4m;R:4m')dnl
# Version 1.0 9/8/12: First release
# Version 1.1 10/8/12:
#	Added resilience for connection to IANA
#	Cache Whois lookups
# Version 1.2 13/8/12:
#	Increased Whois cache time
#	Prefer the GeoIP database
# Version 1.3
#	Use ftok($0) as the key for the shared memory area
# Version 1.4 27/10/16:
#	Check FQDN of localhost

# TODO: Use Proc::Daemon to daemonize ourself

use strict;
use warnings;
use IPC::System::Simple;
use autodie qw(:all);

no lib '.';

my @needfull;

# Install Pre-requisites
BEGIN {
	my @modules = ('Data::Validate::IP', 'Net::DNS', 'Geo::IP', 'Net::Whois::IP',
		'Net::Whois::IANA', 'Locale::Country', 'CHI', 'Sys::Hostname::FQDN'
	);
	if($^O ne 'MSWin32') {
		push @modules, 'IPC::SysV';
	}

	foreach my $module(@modules) {
		eval "use $module";
		if($@) {
			push @needfull, $module;
		}
	}

	if(scalar(@needfull)) {
		my $list = join(' ', @needfull);
		print "Installing $list\n";
		system("cpan -i $list");
	}
	$SIG{__WARN__} = sub {
		my $warning = shift;

		if($warning =~ /^Use of uninitialized value/) {
			die $warning;
		}
		warn $warning;
	}
}

foreach my $module(@needfull) {
	my $version;
	if($module =~ /(.+)\s(.+)$/) {
		$module = $1;
		$version = $2;
	}
	if($module =~ /.+\/(.+)/) {
		$module = $1;
	}
	eval "require $module";
	if($@) {
		die $@;
	}
	$module->import();
	# if($version && ($module::VERSION < $version)) {
		# die "$module: need $version got ", $module::VERSION;
	# }
}

# I have no means install modules with qw (yet)
use Sendmail::PMilter qw(:all);
use Sys::Syslog qw(:standard :macros);

my %blacklist = (
	'MD' => 1,
	'RU' => 1,
	'CN' => 1,
	'BG' => 1,
	'BR' => 1,
	'UY' => 1,
	'TR' => 1,
	'MA' => 1,
	'VE' => 1,
	'SA' => 1,
	'CY' => 1,
	'CO' => 1,
	'KR' => 1,
	'MX' => 1,
	'IN' => 1,
	'RS' => 1,
	'PK' => 1,
	'TW' => 1,
	'VN' => 1,
);

my $milter = Sendmail::PMilter->new();
my $resolver = Net::DNS::Resolver->new();
my $iana = Net::Whois::IANA->new();
my $gi = Geo::IP->new(GEOIP_STANDARD);

my %whitelist_hosts = (
        'oracle1.bandsman.co.uk' => 1,
        'oracle2.bandsman.co.uk' => 1,
);

# Choose your caching mechanism depending on your needs
# my $cache = CHI->new(
	# driver => 'File',
	# root_dir => '/tmp',
	# namespace => $0,
# );
my $cache;
if($^O eq 'MSWin32') {
	$cache = CHI->new(driver => 'Memory', datastore => {});
} else {
	$cache = CHI->new(driver => 'SharedMem', shmkey => IPC::SysV::ftok($0));
}

openlog 'cmilter', 'cons,pid', LOG_MAIL;

my %cbs;
$cbs{'connect'} = sub {
	my ($ctx, $hostname) = @_;

	# print "$0: connection from $hostname\n";

	my $ip;

	if($hostname =~ /\[(.+)]/) {
		$ip = $1;
		unless(is_ipv4($ip)) {
			syslog(LOG_WARNING, "$ip isn't a valid IPv4 address");
			$ctx->setreply(554, "5.7.1", "$ip isn't a valid IPv4 address");
			return SMFIS_REJECT;
		}
	} elsif($hostname eq 'localhost') {
		return SMFIS_ACCEPT;
	} elsif($hostname eq Sys::Hostname::FQDN::fqdn()) {
		return SMFIS_ACCEPT;
	} elsif(exists($whitelist_hosts{$hostname})) {
                return SMFIS_ACCEPT;
	} else {
		my $query = $resolver->search($hostname);

		if($query) {
			foreach my $rr ($query->answer()) {
				next unless($rr->type() eq 'A');
				$ip = $rr->address();
				last;
			}
		} else {
			syslog(LOG_WARNING, "Can't resolve hostname $hostname, " . $resolver->errorstring());
			$ctx->setreply(554, "5.7.1", "Can't resolve hostname $hostname");
			return SMFIS_REJECT;
		}

		unless($ip) {
			syslog(LOG_WARNING, "hostname $hostname, has no A record - rejecting");
			$ctx->setreply(554, "5.7.1", "hostname $hostname, has no A record - rejecting");
			return SMFIS_REJECT;
		}

		# print "resolved to $ip\n";
	}

	if(is_private_ip($ip) || is_loopback_ip($ip)) {
		return SMFIS_ACCEPT;
	}

	my $country = $cache->get($ip);

	unless(defined($country)) {
		$country = $gi->country_code_by_addr($ip);
	}
	unless(defined($country)) {
		# print "$ip: MISS\n";
		my $whois = Net::Whois::IP::whoisip_query($ip);

		if(defined($whois) && exists($whois->{Country})) {
			$country = $whois->{Country};
		}

		if(!defined($country) || ($country !~ /^[A-Z]{2}$/i)) {
			eval {
				$iana->whois_query(-ip => $ip);
			};
			if($@) {
				syslog(LOG_WARNING, $@);
				$country = undef;
				# Create new object
				my $iana = Net::Whois::IANA->new();
			} else {
				$country = $iana->country();
				if($country !~ /^[A-Z]{2}$/i) {
					$country = undef;
				}
			}
		}
		$cache->set($ip, $country, '1 month');
	} else {
		# print "$ip: HIT\n";
	}

	if($country) {
		$country = uc($country);
		if(exists($blacklist{$country})) {
			$country = code2country($country);
			syslog(LOG_WARNING, "We don't accept emails from $country");
			$ctx->setreply(554, "5.7.1", "We don't accept emails from $country");
			return SMFIS_REJECT;
		}
		syslog(LOG_INFO, "$ip: $country");
	} else {
		syslog(LOG_WARNING, "Can't determine the country for IP $ip");

		# Should tempfail with 220 in connect(), however
		# Sendmail::PMilter forces the argument to be 4xx or 5xx
		# $ctx->setreply(220, '4.7.1', "Can't determine the country for IP $ip");
		$ctx->setreply(451, '4.7.1', "Can't determine the country for IP $ip");
		# In the realworld, there is an argument for REJECT here
		return SMFIS_TEMPFAIL;
	}

	return SMFIS_CONTINUE;
};

$milter->auto_setconn('cmilter');
$milter->register('cmilter', \%cbs, SMFI_CURR_ACTS);
$milter->main();
